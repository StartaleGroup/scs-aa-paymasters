// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.29;

import {Script, console} from "forge-std/Script.sol";
import "../src/deployer/Deployer.sol";

contract DeployPostpaidPaymasterCreate3 is Script {
    Deployer deployerInstance;
    address entryPoint;
    mapping(uint256 => uint256) public DEPLOYMENT_CHAIN_GAS_PRICES;

    function setUp() public {
        deployerInstance = Deployer(vm.envAddress("DEPLOYER_CONTRACT_ADDRESS")); // Set Deployer contract
        // EntryPoint v0.7 address
        entryPoint = vm.parseAddress("0x0000000071727De22E5E9d8BAf0edAc6f37da032");
        DEPLOYMENT_CHAIN_GAS_PRICES[1946] = 0.002 gwei;
    }

    function run() public {
        uint256 deployerPrivateKey = vm.envUint("DEPLOYER_CONTRACT_DEPLOYER_PRIVATE_KEY");

        string memory contractName = "StartaleManagedPaymaster";
        string memory saltString = "POSTPAID_SPONSORSHIP_PAYMASTER_V_1_0_0_SALT_200525_q6IgGwK"; // todo: get it from env
        // for above salt the address would be 0x0000007d3cd3002cb096568ba3cc1319c03f2a55

        // Review
        bytes memory deployedBytecode =
            hex"60a06040523461010f5761177a803803809161001a82610127565b60a03960608160a001911261010f57610031610170565b9061003c60c0610186565b60e051926001600160401b03841161010f578260bf8501121561010f5760a0840151926001600160401b038411610113578360051b9460405194610083602088018761014d565b855260c0602086019682010191821161010f5760c001945b8186106100f75750506100ae935061019a565b604051611370908161040a82396080518181816103430152818161041b015281816104bd0152818161055a015281816105df01528181610cac01528181610ef301526112ce0152f35b6020809161010488610186565b81520195019461009b565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b60a0601f91909101601f19168101906001600160401b0382119082101761011357604052565b601f909101601f19168101906001600160401b0382119082101761011357604052565b60a051906001600160a01b038216820361010f57565b51906001600160a01b038216820361010f57565b6101ad916001600160a01b0316906102d6565b8051801561029f575f5b8181106101c357505050565b6101ec6101e06101d383866102ae565b516001600160a01b031690565b6001600160a01b031690565b15610290576102076102016101d383866102ae565b3b151590565b610281578061024761023a6102216101d3600195886102ae565b6001600160a01b03165f90815260208190526040902090565b805460ff19166001179055565b6102576101e06101d383876102ae565b7f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f245f80a2016101b7565b6319e573cb60e11b5f5260045ffd5b63c943590960e01b5f5260045ffd5b63b5fa16ed60e01b5f5260045ffd5b80518210156102c25760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b8060601b15610398576001600160a01b0316638b78c6d8198190555f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a36040516301ffc9a760e01b815263122a0e9b60e31b60048201526020816024816001600160a01b0386165afa801561038d57610359915f9161035e575b506103bd565b608052565b610380915060203d602011610386575b610378818361014d565b8101906103a5565b5f610353565b503d61036e565b6040513d5f823e3d90fd5b637448fbae5f526004601cfd5b9081602091031261010f5751801515810361010f5790565b156103c457565b60405162461bcd60e51b815260206004820152601e60248201527f49456e747279506f696e7420696e74657266616365206d69736d6174636800006044820152606490fdfe6080604052600436101561001a575b3615610018575f80fd5b005b5f5f3560e01c80630396cb6014610ec35780630e316ab714610e245780631b9a91a414610d29578063205c287814610c7f5780632569296214610c3457806344004cc114610b2457806352b7512c1461089257806354d1f13d1461084c5780635829c5f5146107d7578063715018a61461079b578063736c0d5b146106ae5780637c627b21146106ea5780637df73e27146106ae5780638da5cb5b1461068357806394d4ad6014610603578063b0d691fe146105bf578063bb9fe6bf14610536578063c23a5cea14610490578063c399ec88146103ce578063d0e30db01461032c578063eb12d61e1461022d578063f04e283e146101a8578063f2fde38b146101625763fee81cf41461012d575061000e565b3461015f57602036600319011261015f57610146610f7b565b9063389a75e1600c5252602080600c2054604051908152f35b80fd5b50602036600319011261015f5760049061017a610f7b565b50610183611234565b7feb0149e8000000000000000000000000000000000000000000000000000000008152fd5b50602036600319011261015f576101bd610f7b565b6101c5611234565b63389a75e1600c528082526020600c20805442116102205790826001600160a01b0392551680638b78c6d819547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a3638b78c6d8195580f35b636f5e881883526004601cfd5b50602036600319011261015f57610242610f7b565b61024a611234565b6001600160a01b038116908183528260205260ff6040842054166103005781156102d8573b6102b0578082528160205260408220600160ff198254161790557f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f248280a280f35b6004827f33cae796000000000000000000000000000000000000000000000000000000008152fd5b6004837fc9435909000000000000000000000000000000000000000000000000000000008152fd5b602483837f9fb0d64c000000000000000000000000000000000000000000000000000000008252600452fd5b508060031936011261015f57806001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016803b156103cb5781602491604051928380927fb760faf900000000000000000000000000000000000000000000000000000000825230600483015234905af180156103c0576103af5750f35b816103b991610fbf565b61015f5780f35b6040513d84823e3d90fd5b50fd5b503461015f578060031936011261015f576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526020816024816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa9081156103c0578291610456575b602082604051908152f35b90506020813d602011610488575b8161047160209383610fbf565b810103126104845760209150515f61044b565b5080fd5b3d9150610464565b503461015f57602036600319011261015f57806104ab610f7b565b6104b3611234565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690813b15610532576001600160a01b03602484928360405195869485937fc23a5cea0000000000000000000000000000000000000000000000000000000085521660048401525af180156103c0576103af5750f35b5050fd5b503461015f578060031936011261015f5761054f611234565b806001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016803b156103cb578180916004604051809481937fbb9fe6bf0000000000000000000000000000000000000000000000000000000083525af180156103c0576103af5750f35b503461015f578060031936011261015f5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461015f57602036600319011261015f5760043567ffffffffffffffff81116104845765ffffffffffff91826106496106436080943690600401610f91565b906111e4565b9384926040969496519889971687521660208601526060604086015281606086015285850137828201840152601f01601f19168101030190f35b503461015f578060031936011261015f576020638b78c6d819546001600160a01b0360405191168152f35b503461015f57602036600319011261015f5760ff60406020926001600160a01b036106d7610f7b565b1681528084522054166040519015158152f35b503461015f57608036600319011261015f576003600435101561015f5760243567ffffffffffffffff811161048457610727903690600401610f91565b50506107316112c4565b608460405162461bcd60e51b815260206004820152602960248201527f426173655061796d61737465723a205f706f73744f70206d757374206265206f60448201527f76657272696464656e00000000000000000000000000000000000000000000006064820152fd5b508060031936011261015f576004906107b2611234565b7f0e98a7a2000000000000000000000000000000000000000000000000000000008152fd5b503461015f57606036600319011261015f5760043567ffffffffffffffff8111610484576101206003198236030112610484576024359065ffffffffffff82168203610848576044359265ffffffffffff8416840361015f5760206108408585856004016110ab565b604051908152f35b8280fd5b508060031936011261015f5763389a75e1600c52338152806020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c928280a280f35b503461015f57606036600319011261015f5760043567ffffffffffffffff811161048457806004019061012060031982360301126108485761064360e46108e2926108db6112c4565b018361102a565b90604082959395141580610b19575b610af1579061093c6001600160a01b039261090d8787876110ab565b6020527b19457468657265756d205369676e6564204d6573736167653a0a33328852603c60042092369161105d565b908691604051916020820191805180604014610ab357604114610a7857505050505b168015610a50579160209160609493865285835260ff6040872054169081610a19575b50610a135760015b60ff79ffffffffffff000000000000000000000000000000000000000079ffffffffffffffffffffffffffffffffffffffffffffffffffff19604051966109d08789610fbf565b898852604051998a9860408a5280519889918260408d0152018b8b015e89888a01015260d01b169360a01b16911617176020830152601f80199101168101030190f35b84610989565b356001600160a01b03166024357fa329fa2c5008b530bd55ccb366edd98ae4d5af83c4c0feefd377590ab68f32648880a35f610981565b6004857f11ec9984000000000000000000000000000000000000000000000000000000008152fd5b6040919293945060608101518a1a60205201516060525b8752516040526020604060808860015afa50856060523d606018519060405261095e565b507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff919293945060400151601b8160ff1c0160205216606052610a8f565b6004867ff95eeeac000000000000000000000000000000000000000000000000000000008152fd5b5060418214156108f1565b503461015f57606036600319011261015f576004356001600160a01b03811680910361048457602435906001600160a01b03821690818303610c305760443592610b6c611234565b610b74611250565b8215610c2157601452826034526fa9059cbb00000000000000000000000084526020846044601082855af18060018651141615610c03575b50836034526040519283527fedf7bea45e16025d7f82902171a24376f5f3a2c06d9d8c2be4d41bbc7292f74a60203394a4807f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d80f35b3d823b15171015610c14575f610bac565b6390b8ec1884526004601cfd5b600485634261081360e11b8152fd5b8380fd5b508060031936011261015f5763389a75e1600c523381526202a30042016020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d8280a280f35b503461015f57604036600319011261015f5780610c9a610f7b565b610ca2611234565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690813b15610532576001600160a01b03604484928360405195869485937f205c287800000000000000000000000000000000000000000000000000000000855216600484015260243560248401525af180156103c0576103af5750f35b50604036600319011261015f57610d3e610f7b565b6001600160a01b0360243591610d52611234565b610d5a611250565b16908115610e15578280808084865af13d15610e10573d610d7a8161100e565b90610d886040519283610fbf565b81528460203d92013e5b15610de85760207f8455ae6be5d92f1df1c3c1484388e247a36c7e60d72055ae216dbc258f257d4b91604051908152a2807f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d80f35b6004837f27fcd9d1000000000000000000000000000000000000000000000000000000008152fd5b610d92565b600483634261081360e11b8152fd5b50602036600319011261015f576001600160a01b03610e41610f7b565b610e49611234565b168082528160205260ff60408320541615610e9857808252816020526040822060ff1981541690557f3525e22824a8a7df2c9a6029941c824cf95b6447f1e13d5128fd3826d35afe8b8280a280f35b7f2ac468fb000000000000000000000000000000000000000000000000000000008252600452602490fd5b506020366003190112610f775760043563ffffffff8116809103610f7757610ee9611234565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690813b15610f77575f906024604051809481937f0396cb60000000000000000000000000000000000000000000000000000000008352600483015234905af18015610f6c57610f60575080f35b61001891505f90610fbf565b6040513d5f823e3d90fd5b5f80fd5b600435906001600160a01b0382168203610f7757565b9181601f84011215610f775782359167ffffffffffffffff8311610f775760208381860195010111610f7757565b90601f8019910116810190811067ffffffffffffffff821117610fe157604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b67ffffffffffffffff8111610fe157601f01601f191660200190565b903590601e1981360301821215610f77570180359067ffffffffffffffff8211610f7757602001918136038313610f7757565b9291926110698261100e565b916110776040519384610fbf565b829481845281830111610f77578281602093845f960137010152565b90939293848311610f77578411610f77578101920390565b906110c36110bc604084018461102a565b369161105d565b60208151910120926110db6110bc606085018561102a565b60208151910120926110f060e082018261102a565b603494919411610f775760c065ffffffffffff9492601486946040519860208a019a6001600160a01b038535168c52602085013560408c015260608b015260808a0152608083013560a08a015201358288015260a081013560e088015201356101008601524661012086015230610140860152166101608401521661018082015261018081526111826101a082610fbf565b51902090565b9190913579ffffffffffffffffffffffffffffffffffffffffffffffffffff19811692600681106111b7575050565b79ffffffffffffffffffffffffffffffffffffffffffffffffffff19929350829060060360031b1b161690565b9091603a838111610f77576111fd600660348501611188565b60d01c9360408211610f775780604011610f77576040816112278461123095880190840390611188565b60d01c95611093565b9091565b638b78c6d81954330361124357565b6382b429005f526004601cfd5b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005c61129c5760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d565b7f3ee5aeb5000000000000000000000000000000000000000000000000000000005f5260045ffd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036112f657565b606460405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206973206e6f7420456e747279506f696e7400000000000000006044820152fdfea2646970667358221220aa86f72eed252db753a53d627626725abfa636e58aad5ebd3a5822da4a6f83bf64736f6c634300081d0033";

        // Load environment variables
        // uint256 salt = vm.envUint("SALT");
        address owner = vm.envAddress("OWNER");

        // Parse signers from comma-separated string
        string[] memory signers = vm.envString("SIGNERS", ",");
        address[] memory signersAddr = new address[](signers.length);
        for (uint256 i = 0; i < signers.length; i++) {
            signersAddr[i] = vm.parseAddress(signers[i]);
        }

        bytes memory constructorArgs = abi.encode(owner, entryPoint, signersAddr);

        // Concatenate bytecode + constructor arguments
        bytes memory finalBytecode = abi.encodePacked(deployedBytecode, constructorArgs);

        // Deploy contract if needed
        deployGeneric(deployerPrivateKey, saltString, finalBytecode, contractName);
    }

    function deployGeneric(
        uint256 deployerPrivateKey,
        string memory saltString,
        bytes memory finalBytecode,
        string memory contractName
    ) public {
        // Compute derived salt
        bytes32 derivedSalt = keccak256(abi.encodePacked(saltString));

        // Compute contract address before deployment
        address computedAddress = deployerInstance.addressOf(derivedSalt);

        console.log(string(abi.encodePacked(contractName, " Computed Address:")), computedAddress);

        // Check if contract is already deployed
        uint256 codeSize;
        assembly {
            codeSize := extcodesize(computedAddress)
        }

        if (codeSize == 0) {
            console.log(string(abi.encodePacked(contractName, " not deployed, deploying now...")));
            deployContract(deployerPrivateKey, derivedSalt, finalBytecode, contractName, computedAddress);
        } else {
            console.log(string(abi.encodePacked(contractName, " already deployed at:")), computedAddress);
        }
    }

    function deployContract(
        uint256 deployerPrivateKey,
        bytes32 derivedSalt,
        bytes memory finalBytecode,
        string memory contractName,
        address computedAddress
    ) internal {
        uint256 chainId = block.chainid;

        uint256 gasPrice = DEPLOYMENT_CHAIN_GAS_PRICES[chainId];
        require(gasPrice > 0, "No deployment gas price set for this chain");

        console.log("Using gas price:", gasPrice);

        // Deploy contract using deployer's private key
        vm.startBroadcast(deployerPrivateKey);
        (bool success,) = address(deployerInstance).call{gas: 5_000_000}(
            abi.encodeWithSignature("deploy(bytes32,bytes)", derivedSalt, finalBytecode)
        );
        vm.stopBroadcast();

        require(success, "Contract deployment failed");

        console.log(string(abi.encodePacked("Transaction success: ", contractName)));

        // Verify deployment by checking contract existence
        uint256 codeSize;
        assembly {
            codeSize := extcodesize(computedAddress)
        }

        if (codeSize == 0) {
            console.log(string(abi.encodePacked("Invalid deployment of ", contractName)));
        } else {
            console.log(string(abi.encodePacked(contractName, " Deployed Successfully at:")), computedAddress);
        }
    }
}
